===========================================
PENJELASAN DETAIL JAVASCRIPT PORTFOLIO WEBSITE
===========================================

1. DOCUMENT READY & EVENT LISTENERS
---------------------------------
document.addEventListener('DOMContentLoaded', () => {
    // kode inisialisasi
});

Penjelasan:
- DOMContentLoaded memastikan HTML sudah di-load sebelum JavaScript dijalankan
- Arrow function (() => {}) adalah sintaks modern untuk function
- Event listener menunggu DOM selesai loading

2. HAMBURGER MENU FUNCTIONALITY
-----------------------------
const hamburger = document.querySelector('.hamburger');
const navLinks = document.querySelector('.nav-links');

hamburger.addEventListener('click', () => {
    hamburger.classList.toggle('active');
    navLinks.classList.toggle('active');
});

Penjelasan:
- querySelector mengambil element pertama yang match dengan selector CSS
- classList.toggle menambah/menghapus class 'active'
- Event listener untuk click pada hamburger
- Toggle class mengubah tampilan menu (diatur di CSS)

3. CLOSE MENU WHEN CLICKING OUTSIDE
---------------------------------
document.addEventListener('click', (e) => {
    if (!hamburger.contains(e.target) && !navLinks.contains(e.target)) {
        hamburger.classList.remove('active');
        navLinks.classList.remove('active');
    }
});

Penjelasan:
- Event listener pada seluruh document
- contains() mengecek apakah click di dalam element
- e.target adalah element yang di-click
- Menutup menu jika click di luar menu

4. SMOOTH SCROLL NAVIGATION
-------------------------
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        target.scrollIntoView({ behavior: 'smooth' });
    });
});

Penjelasan:
- querySelectorAll mengambil semua link dengan href "#"
- preventDefault mencegah default action link
- getAttribute mengambil nilai href
- scrollIntoView membuat scroll smooth ke target

5. CLOSE MENU AFTER CLICKING LINK
-------------------------------
navLinks.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navLinks.classList.remove('active');
    });
});

Penjelasan:
- Mengambil semua link dalam nav-links
- Menambah event listener ke setiap link
- Menutup menu saat link di-click
- Membuat UX lebih baik

6. ACTIVE SECTION HIGHLIGHTING
----------------------------
const sections = document.querySelectorAll('section');
const navItems = document.querySelectorAll('.nav-links a');

window.addEventListener('scroll', () => {
    let current = '';
    sections.forEach(section => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.clientHeight;
        if (scrollY >= sectionTop - 60) {
            current = section.getAttribute('id');
        }
    });

    navItems.forEach(item => {
        item.classList.remove('active');
        if (item.getAttribute('href').slice(1) === current) {
            item.classList.add('active');
        }
    });
});

Penjelasan:
- Mengtrack posisi scroll
- offsetTop mendapat posisi section dari atas
- clientHeight mendapat tinggi section
- Menambah class 'active' ke nav item yang sesuai

7. FORM VALIDATION
----------------
const form = document.querySelector('.contact-form');
form.addEventListener('submit', (e) => {
    e.preventDefault();
    // Validasi form
    // Kirim data
});

Penjelasan:
- Mencegah form submit default
- Validasi input sebelum submit
- Handling form submission
- Feedback ke user

8. PERFORMANCE OPTIMIZATIONS
--------------------------
Penjelasan teknik yang digunakan:
1. Debouncing
   - Mengurangi frequency event handler
   - Meningkatkan performance

2. Event Delegation
   - Menggunakan satu event listener untuk multiple elements
   - Lebih efisien untuk memory

3. RAF (RequestAnimationFrame)
   - Smooth animations
   - Optimal untuk scrolling events

9. BEST PRACTICES YANG DIGUNAKAN
------------------------------
1. Clean Code
   - Meaningful variable names
   - Function yang reusable
   - Proper commenting
   - Consistent formatting

2. Modern JavaScript
   - ES6+ features
   - Arrow functions
   - Template literals
   - Destructuring

3. Error Handling
   - Try-catch blocks
   - Graceful degradation
   - User feedback
   - Console logging

4. Performance
   - Code splitting
   - Lazy loading
   - Minification
   - Caching

5. Security
   - Input sanitization
   - XSS prevention
   - CSRF protection
   - Secure data handling

6. Maintainability
   - Modular code
   - DRY principle
   - Single responsibility
   - Clear documentation

7. Browser Compatibility
   - Feature detection
   - Polyfills when needed
   - Cross-browser testing
   - Fallback options

8. Debug Techniques
   - Console methods
   - Breakpoints
   - Error tracking
   - Performance monitoring

10. EVENT HANDLING TIPS
---------------------
1. Event Bubbling
   - Understanding event propagation
   - stopPropagation() usage
   - Event delegation benefits

2. Event Types
   - Mouse events
   - Keyboard events
   - Touch events
   - Form events

3. Performance Considerations
   - Throttling
   - Debouncing
   - Passive event listeners
   - Memory management

11. CONTACT FORM HANDLING
-------------------------

The contact form JavaScript implementation handles form submission and response management using the Web3Forms API.

1. Form Initialization
---------------------
- Gets references to form and result elements
- Checks if elements exist before adding listeners
- Wrapped in DOMContentLoaded event

2. Event Handling
----------------
form.addEventListener('submit', async (e) => {
    - Prevents default form submission
    - Collects form data
    - Converts to JSON format
    - Shows loading message
});

3. API Integration
-----------------
fetch('https://api.web3forms.com/submit', {
    - Sends POST request to Web3Forms API
    - Includes necessary headers
    - Handles JSON data
});

4. Response Handling
-------------------
- Success case:
  * Shows success message
  * Resets form
  * Adds success styling
  
- Error case:
  * Shows error message
  * Adds error styling
  
- Both cases:
  * Auto-hides message after 5 seconds
  * Cleans up CSS classes

Features:
- Asynchronous form submission
- User feedback for all states
- Error handling
- Automatic message cleanup
- Form data validation
- Protection against multiple submissions

Best Practices:
- Event delegation
- Error boundary implementation
- Clean class management
- Proper async/await usage
- Form state management
